// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: kontext.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KontextKV_Get_FullMethodName    = "/kontext.KontextKV/Get"
	KontextKV_Set_FullMethodName    = "/kontext.KontextKV/Set"
	KontextKV_Del_FullMethodName    = "/kontext.KontextKV/Del"
	KontextKV_Incr_FullMethodName   = "/kontext.KontextKV/Incr"
	KontextKV_Decr_FullMethodName   = "/kontext.KontextKV/Decr"
	KontextKV_GetDel_FullMethodName = "/kontext.KontextKV/GetDel"
	KontextKV_GetSet_FullMethodName = "/kontext.KontextKV/GetSet"
	KontextKV_Lpush_FullMethodName  = "/kontext.KontextKV/Lpush"
	KontextKV_Lpop_FullMethodName   = "/kontext.KontextKV/Lpop"
	KontextKV_Rpush_FullMethodName  = "/kontext.KontextKV/Rpush"
	KontextKV_Rpop_FullMethodName   = "/kontext.KontextKV/Rpop"
	KontextKV_Size_FullMethodName   = "/kontext.KontextKV/Size"
)

// KontextKVClient is the client API for KontextKV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KontextKVClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
	Incr(ctx context.Context, in *IncrDecrRequest, opts ...grpc.CallOption) (*IncrDecrResponse, error)
	Decr(ctx context.Context, in *IncrDecrRequest, opts ...grpc.CallOption) (*IncrDecrResponse, error)
	GetDel(ctx context.Context, in *GetDelRequest, opts ...grpc.CallOption) (*GetDelResponse, error)
	GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*GetSetResponse, error)
	Lpush(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
	Lpop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error)
	Rpush(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
	Rpop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error)
	Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*SizeResponse, error)
}

type kontextKVClient struct {
	cc grpc.ClientConnInterface
}

func NewKontextKVClient(cc grpc.ClientConnInterface) KontextKVClient {
	return &kontextKVClient{cc}
}

func (c *kontextKVClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, KontextKV_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kontextKVClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, KontextKV_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kontextKVClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelResponse)
	err := c.cc.Invoke(ctx, KontextKV_Del_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kontextKVClient) Incr(ctx context.Context, in *IncrDecrRequest, opts ...grpc.CallOption) (*IncrDecrResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncrDecrResponse)
	err := c.cc.Invoke(ctx, KontextKV_Incr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kontextKVClient) Decr(ctx context.Context, in *IncrDecrRequest, opts ...grpc.CallOption) (*IncrDecrResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncrDecrResponse)
	err := c.cc.Invoke(ctx, KontextKV_Decr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kontextKVClient) GetDel(ctx context.Context, in *GetDelRequest, opts ...grpc.CallOption) (*GetDelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDelResponse)
	err := c.cc.Invoke(ctx, KontextKV_GetDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kontextKVClient) GetSet(ctx context.Context, in *GetSetRequest, opts ...grpc.CallOption) (*GetSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSetResponse)
	err := c.cc.Invoke(ctx, KontextKV_GetSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kontextKVClient) Lpush(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, KontextKV_Lpush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kontextKVClient) Lpop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PopResponse)
	err := c.cc.Invoke(ctx, KontextKV_Lpop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kontextKVClient) Rpush(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, KontextKV_Rpush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kontextKVClient) Rpop(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*PopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PopResponse)
	err := c.cc.Invoke(ctx, KontextKV_Rpop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kontextKVClient) Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*SizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SizeResponse)
	err := c.cc.Invoke(ctx, KontextKV_Size_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KontextKVServer is the server API for KontextKV service.
// All implementations must embed UnimplementedKontextKVServer
// for forward compatibility.
type KontextKVServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Del(context.Context, *DelRequest) (*DelResponse, error)
	Incr(context.Context, *IncrDecrRequest) (*IncrDecrResponse, error)
	Decr(context.Context, *IncrDecrRequest) (*IncrDecrResponse, error)
	GetDel(context.Context, *GetDelRequest) (*GetDelResponse, error)
	GetSet(context.Context, *GetSetRequest) (*GetSetResponse, error)
	Lpush(context.Context, *PushRequest) (*PushResponse, error)
	Lpop(context.Context, *PopRequest) (*PopResponse, error)
	Rpush(context.Context, *PushRequest) (*PushResponse, error)
	Rpop(context.Context, *PopRequest) (*PopResponse, error)
	Size(context.Context, *SizeRequest) (*SizeResponse, error)
	mustEmbedUnimplementedKontextKVServer()
}

// UnimplementedKontextKVServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKontextKVServer struct{}

func (UnimplementedKontextKVServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKontextKVServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedKontextKVServer) Del(context.Context, *DelRequest) (*DelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedKontextKVServer) Incr(context.Context, *IncrDecrRequest) (*IncrDecrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Incr not implemented")
}
func (UnimplementedKontextKVServer) Decr(context.Context, *IncrDecrRequest) (*IncrDecrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decr not implemented")
}
func (UnimplementedKontextKVServer) GetDel(context.Context, *GetDelRequest) (*GetDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDel not implemented")
}
func (UnimplementedKontextKVServer) GetSet(context.Context, *GetSetRequest) (*GetSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSet not implemented")
}
func (UnimplementedKontextKVServer) Lpush(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lpush not implemented")
}
func (UnimplementedKontextKVServer) Lpop(context.Context, *PopRequest) (*PopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lpop not implemented")
}
func (UnimplementedKontextKVServer) Rpush(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rpush not implemented")
}
func (UnimplementedKontextKVServer) Rpop(context.Context, *PopRequest) (*PopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rpop not implemented")
}
func (UnimplementedKontextKVServer) Size(context.Context, *SizeRequest) (*SizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Size not implemented")
}
func (UnimplementedKontextKVServer) mustEmbedUnimplementedKontextKVServer() {}
func (UnimplementedKontextKVServer) testEmbeddedByValue()                   {}

// UnsafeKontextKVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KontextKVServer will
// result in compilation errors.
type UnsafeKontextKVServer interface {
	mustEmbedUnimplementedKontextKVServer()
}

func RegisterKontextKVServer(s grpc.ServiceRegistrar, srv KontextKVServer) {
	// If the following call pancis, it indicates UnimplementedKontextKVServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KontextKV_ServiceDesc, srv)
}

func _KontextKV_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KontextKV_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KontextKV_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KontextKV_Incr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrDecrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).Incr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_Incr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).Incr(ctx, req.(*IncrDecrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KontextKV_Decr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrDecrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).Decr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_Decr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).Decr(ctx, req.(*IncrDecrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KontextKV_GetDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).GetDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_GetDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).GetDel(ctx, req.(*GetDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KontextKV_GetSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).GetSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_GetSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).GetSet(ctx, req.(*GetSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KontextKV_Lpush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).Lpush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_Lpush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).Lpush(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KontextKV_Lpop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).Lpop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_Lpop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).Lpop(ctx, req.(*PopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KontextKV_Rpush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).Rpush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_Rpush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).Rpush(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KontextKV_Rpop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).Rpop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_Rpop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).Rpop(ctx, req.(*PopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KontextKV_Size_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KontextKVServer).Size(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KontextKV_Size_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KontextKVServer).Size(ctx, req.(*SizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KontextKV_ServiceDesc is the grpc.ServiceDesc for KontextKV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KontextKV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kontext.KontextKV",
	HandlerType: (*KontextKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _KontextKV_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _KontextKV_Set_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _KontextKV_Del_Handler,
		},
		{
			MethodName: "Incr",
			Handler:    _KontextKV_Incr_Handler,
		},
		{
			MethodName: "Decr",
			Handler:    _KontextKV_Decr_Handler,
		},
		{
			MethodName: "GetDel",
			Handler:    _KontextKV_GetDel_Handler,
		},
		{
			MethodName: "GetSet",
			Handler:    _KontextKV_GetSet_Handler,
		},
		{
			MethodName: "Lpush",
			Handler:    _KontextKV_Lpush_Handler,
		},
		{
			MethodName: "Lpop",
			Handler:    _KontextKV_Lpop_Handler,
		},
		{
			MethodName: "Rpush",
			Handler:    _KontextKV_Rpush_Handler,
		},
		{
			MethodName: "Rpop",
			Handler:    _KontextKV_Rpop_Handler,
		},
		{
			MethodName: "Size",
			Handler:    _KontextKV_Size_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kontext.proto",
}
